// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file video.proto (package v1.video, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message v1.video.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string username = 2;
   */
  username = "";

  /**
   * @generated from field: string avatar_url = 3;
   */
  avatarUrl = "";

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.video.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "avatar_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message v1.video.Video
 */
export class Video extends Message<Video> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: string dmm_id = 4;
   */
  dmmId = "";

  /**
   * @generated from field: string thumbnail_url = 5;
   */
  thumbnailUrl = "";

  /**
   * @generated from field: string created_at = 6;
   */
  createdAt = "";

  /**
   * @generated from field: int32 likes_count = 7;
   */
  likesCount = 0;

  /**
   * @generated from field: string sample_url = 8;
   */
  sampleUrl = "";

  /**
   * @generated from field: string url = 9;
   */
  url = "";

  /**
   * @generated from field: v1.video.User author = 10;
   */
  author?: User;

  /**
   * @generated from field: string direct_url = 11;
   */
  directUrl = "";

  constructor(data?: PartialMessage<Video>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.video.Video";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "dmm_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "thumbnail_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "likes_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "sample_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "author", kind: "message", T: User },
    { no: 11, name: "direct_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Video {
    return new Video().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Video {
    return new Video().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Video {
    return new Video().fromJsonString(jsonString, options);
  }

  static equals(a: Video | PlainMessage<Video> | undefined, b: Video | PlainMessage<Video> | undefined): boolean {
    return proto3.util.equals(Video, a, b);
  }
}

/**
 * @generated from message v1.video.GetVideosRequest
 */
export class GetVideosRequest extends Message<GetVideosRequest> {
  /**
   * Optional date filter
   *
   * @generated from field: string date = 1;
   */
  date = "";

  constructor(data?: PartialMessage<GetVideosRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.video.GetVideosRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVideosRequest {
    return new GetVideosRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVideosRequest {
    return new GetVideosRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVideosRequest {
    return new GetVideosRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetVideosRequest | PlainMessage<GetVideosRequest> | undefined, b: GetVideosRequest | PlainMessage<GetVideosRequest> | undefined): boolean {
    return proto3.util.equals(GetVideosRequest, a, b);
  }
}

/**
 * @generated from message v1.video.GetVideosResponse
 */
export class GetVideosResponse extends Message<GetVideosResponse> {
  /**
   * @generated from field: repeated v1.video.Video videos = 1;
   */
  videos: Video[] = [];

  constructor(data?: PartialMessage<GetVideosResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.video.GetVideosResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "videos", kind: "message", T: Video, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVideosResponse {
    return new GetVideosResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVideosResponse {
    return new GetVideosResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVideosResponse {
    return new GetVideosResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetVideosResponse | PlainMessage<GetVideosResponse> | undefined, b: GetVideosResponse | PlainMessage<GetVideosResponse> | undefined): boolean {
    return proto3.util.equals(GetVideosResponse, a, b);
  }
}

/**
 * @generated from message v1.video.GetVideoByIdRequest
 */
export class GetVideoByIdRequest extends Message<GetVideoByIdRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetVideoByIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.video.GetVideoByIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVideoByIdRequest {
    return new GetVideoByIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVideoByIdRequest {
    return new GetVideoByIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVideoByIdRequest {
    return new GetVideoByIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetVideoByIdRequest | PlainMessage<GetVideoByIdRequest> | undefined, b: GetVideoByIdRequest | PlainMessage<GetVideoByIdRequest> | undefined): boolean {
    return proto3.util.equals(GetVideoByIdRequest, a, b);
  }
}

/**
 * @generated from message v1.video.GetVideoByIdResponse
 */
export class GetVideoByIdResponse extends Message<GetVideoByIdResponse> {
  /**
   * @generated from field: v1.video.Video video = 1;
   */
  video?: Video;

  constructor(data?: PartialMessage<GetVideoByIdResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.video.GetVideoByIdResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "video", kind: "message", T: Video },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVideoByIdResponse {
    return new GetVideoByIdResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVideoByIdResponse {
    return new GetVideoByIdResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVideoByIdResponse {
    return new GetVideoByIdResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetVideoByIdResponse | PlainMessage<GetVideoByIdResponse> | undefined, b: GetVideoByIdResponse | PlainMessage<GetVideoByIdResponse> | undefined): boolean {
    return proto3.util.equals(GetVideoByIdResponse, a, b);
  }
}

