// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file proto/video/video.proto (package video, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * 各属性用のメッセージ定義（IDと名前）
 *
 * @generated from message video.Actress
 */
export class Actress extends Message<Actress> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<Actress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "video.Actress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Actress {
    return new Actress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Actress {
    return new Actress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Actress {
    return new Actress().fromJsonString(jsonString, options);
  }

  static equals(a: Actress | PlainMessage<Actress> | undefined, b: Actress | PlainMessage<Actress> | undefined): boolean {
    return proto3.util.equals(Actress, a, b);
  }
}

/**
 * @generated from message video.Genre
 */
export class Genre extends Message<Genre> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<Genre>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "video.Genre";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Genre {
    return new Genre().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Genre {
    return new Genre().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Genre {
    return new Genre().fromJsonString(jsonString, options);
  }

  static equals(a: Genre | PlainMessage<Genre> | undefined, b: Genre | PlainMessage<Genre> | undefined): boolean {
    return proto3.util.equals(Genre, a, b);
  }
}

/**
 * @generated from message video.Maker
 */
export class Maker extends Message<Maker> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<Maker>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "video.Maker";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Maker {
    return new Maker().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Maker {
    return new Maker().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Maker {
    return new Maker().fromJsonString(jsonString, options);
  }

  static equals(a: Maker | PlainMessage<Maker> | undefined, b: Maker | PlainMessage<Maker> | undefined): boolean {
    return proto3.util.equals(Maker, a, b);
  }
}

/**
 * @generated from message video.Series
 */
export class Series extends Message<Series> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<Series>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "video.Series";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Series {
    return new Series().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Series {
    return new Series().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Series {
    return new Series().fromJsonString(jsonString, options);
  }

  static equals(a: Series | PlainMessage<Series> | undefined, b: Series | PlainMessage<Series> | undefined): boolean {
    return proto3.util.equals(Series, a, b);
  }
}

/**
 * @generated from message video.Director
 */
export class Director extends Message<Director> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<Director>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "video.Director";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Director {
    return new Director().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Director {
    return new Director().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Director {
    return new Director().fromJsonString(jsonString, options);
  }

  static equals(a: Director | PlainMessage<Director> | undefined, b: Director | PlainMessage<Director> | undefined): boolean {
    return proto3.util.equals(Director, a, b);
  }
}

/**
 * Videoメッセージを重要度順に並び替え
 *
 * @generated from message video.Video
 */
export class Video extends Message<Video> {
  /**
   * @generated from field: string dmm_id = 1;
   */
  dmmId = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string direct_url = 3;
   */
  directUrl = "";

  /**
   * @generated from field: string url = 4;
   */
  url = "";

  /**
   * @generated from field: string sample_url = 5;
   */
  sampleUrl = "";

  /**
   * @generated from field: string thumbnail_url = 6;
   */
  thumbnailUrl = "";

  /**
   * @generated from field: string created_at = 7;
   */
  createdAt = "";

  /**
   * @generated from field: int32 price = 8;
   */
  price = 0;

  /**
   * @generated from field: int32 likes_count = 9;
   */
  likesCount = 0;

  /**
   * @generated from field: repeated video.Actress actresses = 10;
   */
  actresses: Actress[] = [];

  /**
   * @generated from field: repeated video.Genre genres = 11;
   */
  genres: Genre[] = [];

  /**
   * @generated from field: repeated video.Maker makers = 12;
   */
  makers: Maker[] = [];

  /**
   * @generated from field: repeated video.Series series = 13;
   */
  series: Series[] = [];

  /**
   * @generated from field: repeated video.Director directors = 14;
   */
  directors: Director[] = [];

  constructor(data?: PartialMessage<Video>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "video.Video";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dmm_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "direct_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "sample_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "thumbnail_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "price", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "likes_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "actresses", kind: "message", T: Actress, repeated: true },
    { no: 11, name: "genres", kind: "message", T: Genre, repeated: true },
    { no: 12, name: "makers", kind: "message", T: Maker, repeated: true },
    { no: 13, name: "series", kind: "message", T: Series, repeated: true },
    { no: 14, name: "directors", kind: "message", T: Director, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Video {
    return new Video().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Video {
    return new Video().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Video {
    return new Video().fromJsonString(jsonString, options);
  }

  static equals(a: Video | PlainMessage<Video> | undefined, b: Video | PlainMessage<Video> | undefined): boolean {
    return proto3.util.equals(Video, a, b);
  }
}

/**
 * @generated from message video.GetVideosByDateRequest
 */
export class GetVideosByDateRequest extends Message<GetVideosByDateRequest> {
  /**
   * Optional date filter
   *
   * @generated from field: string date = 1;
   */
  date = "";

  constructor(data?: PartialMessage<GetVideosByDateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "video.GetVideosByDateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVideosByDateRequest {
    return new GetVideosByDateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVideosByDateRequest {
    return new GetVideosByDateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVideosByDateRequest {
    return new GetVideosByDateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetVideosByDateRequest | PlainMessage<GetVideosByDateRequest> | undefined, b: GetVideosByDateRequest | PlainMessage<GetVideosByDateRequest> | undefined): boolean {
    return proto3.util.equals(GetVideosByDateRequest, a, b);
  }
}

/**
 * @generated from message video.GetVideosByDateResponse
 */
export class GetVideosByDateResponse extends Message<GetVideosByDateResponse> {
  /**
   * @generated from field: repeated video.Video videos = 1;
   */
  videos: Video[] = [];

  constructor(data?: PartialMessage<GetVideosByDateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "video.GetVideosByDateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "videos", kind: "message", T: Video, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVideosByDateResponse {
    return new GetVideosByDateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVideosByDateResponse {
    return new GetVideosByDateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVideosByDateResponse {
    return new GetVideosByDateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetVideosByDateResponse | PlainMessage<GetVideosByDateResponse> | undefined, b: GetVideosByDateResponse | PlainMessage<GetVideosByDateResponse> | undefined): boolean {
    return proto3.util.equals(GetVideosByDateResponse, a, b);
  }
}

/**
 * @generated from message video.GetVideoByIdRequest
 */
export class GetVideoByIdRequest extends Message<GetVideoByIdRequest> {
  /**
   * @generated from field: string dmm_id = 1;
   */
  dmmId = "";

  constructor(data?: PartialMessage<GetVideoByIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "video.GetVideoByIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dmm_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVideoByIdRequest {
    return new GetVideoByIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVideoByIdRequest {
    return new GetVideoByIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVideoByIdRequest {
    return new GetVideoByIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetVideoByIdRequest | PlainMessage<GetVideoByIdRequest> | undefined, b: GetVideoByIdRequest | PlainMessage<GetVideoByIdRequest> | undefined): boolean {
    return proto3.util.equals(GetVideoByIdRequest, a, b);
  }
}

/**
 * @generated from message video.GetVideoByIdResponse
 */
export class GetVideoByIdResponse extends Message<GetVideoByIdResponse> {
  /**
   * @generated from field: video.Video video = 1;
   */
  video?: Video;

  constructor(data?: PartialMessage<GetVideoByIdResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "video.GetVideoByIdResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "video", kind: "message", T: Video },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVideoByIdResponse {
    return new GetVideoByIdResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVideoByIdResponse {
    return new GetVideoByIdResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVideoByIdResponse {
    return new GetVideoByIdResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetVideoByIdResponse | PlainMessage<GetVideoByIdResponse> | undefined, b: GetVideoByIdResponse | PlainMessage<GetVideoByIdResponse> | undefined): boolean {
    return proto3.util.equals(GetVideoByIdResponse, a, b);
  }
}

/**
 * 検索用メッセージ（ID指定のみ）
 *
 * @generated from message video.SearchVideosRequest
 */
export class SearchVideosRequest extends Message<SearchVideosRequest> {
  /**
   * Optional keyword
   *
   * @generated from field: string keyword = 1;
   */
  keyword = "";

  /**
   * @generated from field: string actress_id = 2;
   */
  actressId = "";

  /**
   * @generated from field: string genre_id = 3;
   */
  genreId = "";

  /**
   * @generated from field: string maker_id = 4;
   */
  makerId = "";

  /**
   * @generated from field: string series_id = 5;
   */
  seriesId = "";

  /**
   * ← 追加
   *
   * @generated from field: string director_id = 6;
   */
  directorId = "";

  constructor(data?: PartialMessage<SearchVideosRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "video.SearchVideosRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keyword", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "actress_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "genre_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "maker_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "series_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "director_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchVideosRequest {
    return new SearchVideosRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchVideosRequest {
    return new SearchVideosRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchVideosRequest {
    return new SearchVideosRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SearchVideosRequest | PlainMessage<SearchVideosRequest> | undefined, b: SearchVideosRequest | PlainMessage<SearchVideosRequest> | undefined): boolean {
    return proto3.util.equals(SearchVideosRequest, a, b);
  }
}

/**
 * @generated from message video.SearchVideosResponse
 */
export class SearchVideosResponse extends Message<SearchVideosResponse> {
  /**
   * @generated from field: repeated video.Video videos = 1;
   */
  videos: Video[] = [];

  constructor(data?: PartialMessage<SearchVideosResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "video.SearchVideosResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "videos", kind: "message", T: Video, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchVideosResponse {
    return new SearchVideosResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchVideosResponse {
    return new SearchVideosResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchVideosResponse {
    return new SearchVideosResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SearchVideosResponse | PlainMessage<SearchVideosResponse> | undefined, b: SearchVideosResponse | PlainMessage<SearchVideosResponse> | undefined): boolean {
    return proto3.util.equals(SearchVideosResponse, a, b);
  }
}

